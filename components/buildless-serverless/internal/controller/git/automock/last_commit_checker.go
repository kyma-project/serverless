// Code generated by mockery v2.53.3. DO NOT EDIT.

package automock

import (
	git "github.com/kyma-project/serverless/internal/controller/git"
	mock "github.com/stretchr/testify/mock"
)

// LastCommitChecker is an autogenerated mock type for the LastCommitChecker type
type LastCommitChecker struct {
	mock.Mock
}

// GetLatestCommit provides a mock function with given fields: url, reference, gitAuth, force
func (_m *LastCommitChecker) GetLatestCommit(url string, reference string, gitAuth *git.GitAuth, force bool) (string, error) {
	ret := _m.Called(url, reference, gitAuth, force)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestCommit")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *git.GitAuth, bool) (string, error)); ok {
		return rf(url, reference, gitAuth, force)
	}
	if rf, ok := ret.Get(0).(func(string, string, *git.GitAuth, bool) string); ok {
		r0 = rf(url, reference, gitAuth, force)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, *git.GitAuth, bool) error); ok {
		r1 = rf(url, reference, gitAuth, force)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLastCommitChecker creates a new instance of LastCommitChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLastCommitChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *LastCommitChecker {
	mock := &LastCommitChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
